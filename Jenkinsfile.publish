#!/bin/env groovy

@Library('cliqz-shared-library@vagrant') _

node('mac-vm-host') {

    writeFile file: 'Vagrantfile', text: '''
      Vagrant.configure("2") do |config|

        config.vm.box = "browser-f_mac10.11.4_34"
        config.vm.network "public_network"

        config.vm.provider "vmware_fusion" do |v|
          v.gui = false
          v.memory = ENV["NODE_MEMORY"]
          v.cpus = ENV["NODE_CPU_COUNT"]
          v.vmx["remotedisplay.vnc.enabled"] = "TRUE"
          v.vmx["RemoteDisplay.vnc.port"] = ENV["NODE_VNC_PORT"]
        end

        config.vm.provision "shell", privileged: false, run: "always", inline: <<-SHELL
          rm -f slave.jar
          wget #{ENV['JENKINS_URL']}/jnlpJars/slave.jar
          nohup java -jar slave.jar -jnlpUrl #{ENV['JENKINS_URL']}/computer/#{ENV['NODE_ID']}/slave-agent.jnlp -secret #{ENV["NODE_SECRET"]} &
        SHELL
      end
    '''

    vagrant.inside(
        'Vagrantfile',
        '/jenkins',
        4, // CPU
        4000, // MEMOERY
        12000, // VNC port
        false, // rebuild image
    ) { nodeId ->
        node(nodeId) {
            stage('Checkout') {
                checkout([
                    $class: 'GitSCM',
                    branches: scm.branches,
                    extensions: scm.extensions + [
                        [$class: 'CheckoutOption', timeout: 30],
                        [$class: 'CloneOption', depth: 0, noTags: true, reference: '', shallow: true, timeout: 30, honorRefspec: true],
                    ],
                    userRemoteConfigs: scm.userRemoteConfigs
                ])
            }

            stage('Prepare') {
                sh '''#!/bin/bash -l
                    set -x
                    set -e
                    gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
                    \\curl -sSL https://get.rvm.io | bash -s stable
                    rvm use ruby-2.4.0
                    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"
                    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
                    brew update
                    brew install gpg
                    brew install xctool
                    brew install carthage
                    brew install yarn
                    gem install xcpretty -N
                    gem install cocoapods
                    pod --version
                '''
                // load/restore carthage build directory
                sh '''#!/bin/bash -l
                    set -x
                    set -e
                    CART_CACHE=/tmp/carthage_cache_`md5 -q Cartfile`.tar; tar -xf $CART_CACHE ; echo A |./bootstrap.sh && tar -cf $CART_CACHE Carthage Cartfile.resolved
                '''
                sh '''#!/bin/bash -l
                    set -x
                    set -e
                    yarn install
                    pod install
                    npm run dev-bundle
                '''
            }

            stage('Build') {
                timeout(20) {
                    sh '''#!/bin/bash -l
                        set -x
                        set -e
                        rvm use ruby-2.4.0
                        xcodebuild -workspace Client.xcworkspace -scheme "Fennec" -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO -derivedDataPath clean build
                    '''
                }
            }
        }
    }
}
